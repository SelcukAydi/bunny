// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Complex.proto
// Protobuf C++ Version: 4.26.0-dev

#ifndef GOOGLE_PROTOBUF_INCLUDED_Complex_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_Complex_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION != 4026000
#error "Protobuf C++ gencode is built with an incompatible version of"
#error "Protobuf C++ headers/runtime. See"
#error "https://protobuf.dev/support/cross-version-runtime-guarantee/#cpp"
#endif
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/map.h"  // IWYU pragma: export
#include "google/protobuf/map_entry.h"
#include "google/protobuf/map_field_inl.h"
#include "google/protobuf/unknown_field_set.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_Complex_2eproto

namespace google {
namespace protobuf {
namespace internal {
class AnyMetadata;
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_Complex_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_Complex_2eproto;
namespace complexbenchmarking {
class ComplexClass;
struct ComplexClassDefaultTypeInternal;
extern ComplexClassDefaultTypeInternal _ComplexClass_default_instance_;
class ComplexClass_InnerIntMap;
struct ComplexClass_InnerIntMapDefaultTypeInternal;
extern ComplexClass_InnerIntMapDefaultTypeInternal _ComplexClass_InnerIntMap_default_instance_;
class ComplexClass_InnerIntMap_MMapEntry_DoNotUse;
struct ComplexClass_InnerIntMap_MMapEntry_DoNotUseDefaultTypeInternal;
extern ComplexClass_InnerIntMap_MMapEntry_DoNotUseDefaultTypeInternal _ComplexClass_InnerIntMap_MMapEntry_DoNotUse_default_instance_;
class ComplexClass_InnerPlainClassMap;
struct ComplexClass_InnerPlainClassMapDefaultTypeInternal;
extern ComplexClass_InnerPlainClassMapDefaultTypeInternal _ComplexClass_InnerPlainClassMap_default_instance_;
class ComplexClass_InnerPlainClassMapArray;
struct ComplexClass_InnerPlainClassMapArrayDefaultTypeInternal;
extern ComplexClass_InnerPlainClassMapArrayDefaultTypeInternal _ComplexClass_InnerPlainClassMapArray_default_instance_;
class ComplexClass_InnerPlainClassMap_MyMapEntry_DoNotUse;
struct ComplexClass_InnerPlainClassMap_MyMapEntry_DoNotUseDefaultTypeInternal;
extern ComplexClass_InnerPlainClassMap_MyMapEntry_DoNotUseDefaultTypeInternal _ComplexClass_InnerPlainClassMap_MyMapEntry_DoNotUse_default_instance_;
class ComplexClass_IntMapEntry_DoNotUse;
struct ComplexClass_IntMapEntry_DoNotUseDefaultTypeInternal;
extern ComplexClass_IntMapEntry_DoNotUseDefaultTypeInternal _ComplexClass_IntMapEntry_DoNotUse_default_instance_;
class ComplexClass_PlainClass;
struct ComplexClass_PlainClassDefaultTypeInternal;
extern ComplexClass_PlainClassDefaultTypeInternal _ComplexClass_PlainClass_default_instance_;
class ComplexClass_PlainClass_MyMapEntry_DoNotUse;
struct ComplexClass_PlainClass_MyMapEntry_DoNotUseDefaultTypeInternal;
extern ComplexClass_PlainClass_MyMapEntry_DoNotUseDefaultTypeInternal _ComplexClass_PlainClass_MyMapEntry_DoNotUse_default_instance_;
}  // namespace complexbenchmarking
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace complexbenchmarking {

// ===================================================================


// -------------------------------------------------------------------

class ComplexClass_PlainClass_MyMapEntry_DoNotUse final
    : public ::google::protobuf::internal::MapEntry<
          ComplexClass_PlainClass_MyMapEntry_DoNotUse, ::int32_t, std::string,
          ::google::protobuf::internal::WireFormatLite::TYPE_INT32,
          ::google::protobuf::internal::WireFormatLite::TYPE_STRING> {
 public:
  using SuperType = ::google::protobuf::internal::MapEntry<
      ComplexClass_PlainClass_MyMapEntry_DoNotUse, ::int32_t, std::string,
      ::google::protobuf::internal::WireFormatLite::TYPE_INT32,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING>;
  ComplexClass_PlainClass_MyMapEntry_DoNotUse();
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR ComplexClass_PlainClass_MyMapEntry_DoNotUse(
      ::google::protobuf::internal::ConstantInitialized);
  explicit ComplexClass_PlainClass_MyMapEntry_DoNotUse(::google::protobuf::Arena* arena);
  static const ComplexClass_PlainClass_MyMapEntry_DoNotUse* internal_default_instance() {
    return reinterpret_cast<const ComplexClass_PlainClass_MyMapEntry_DoNotUse*>(
        &_ComplexClass_PlainClass_MyMapEntry_DoNotUse_default_instance_);
  }
  static bool ValidateKey(void*) { return true; }
  static bool ValidateValue(std::string* s) {
#ifndef NDEBUG
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
       s->data(), static_cast<int>(s->size()), ::google::protobuf::internal::WireFormatLite::PARSE, "complexbenchmarking.ComplexClass.PlainClass.MyMapEntry.value");
#else
    (void) s;
#endif
    return true;
 }
  ::google::protobuf::Metadata GetMetadata() const final;
  friend struct ::TableStruct_Complex_2eproto;
};
// -------------------------------------------------------------------

class ComplexClass_InnerIntMap_MMapEntry_DoNotUse final
    : public ::google::protobuf::internal::MapEntry<
          ComplexClass_InnerIntMap_MMapEntry_DoNotUse, ::int32_t, ::int32_t,
          ::google::protobuf::internal::WireFormatLite::TYPE_INT32,
          ::google::protobuf::internal::WireFormatLite::TYPE_INT32> {
 public:
  using SuperType = ::google::protobuf::internal::MapEntry<
      ComplexClass_InnerIntMap_MMapEntry_DoNotUse, ::int32_t, ::int32_t,
      ::google::protobuf::internal::WireFormatLite::TYPE_INT32,
      ::google::protobuf::internal::WireFormatLite::TYPE_INT32>;
  ComplexClass_InnerIntMap_MMapEntry_DoNotUse();
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR ComplexClass_InnerIntMap_MMapEntry_DoNotUse(
      ::google::protobuf::internal::ConstantInitialized);
  explicit ComplexClass_InnerIntMap_MMapEntry_DoNotUse(::google::protobuf::Arena* arena);
  static const ComplexClass_InnerIntMap_MMapEntry_DoNotUse* internal_default_instance() {
    return reinterpret_cast<const ComplexClass_InnerIntMap_MMapEntry_DoNotUse*>(
        &_ComplexClass_InnerIntMap_MMapEntry_DoNotUse_default_instance_);
  }
  static bool ValidateKey(void*) { return true; }
  static bool ValidateValue(void*) { return true; }
  ::google::protobuf::Metadata GetMetadata() const final;
  friend struct ::TableStruct_Complex_2eproto;
};
// -------------------------------------------------------------------

class ComplexClass_PlainClass final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:complexbenchmarking.ComplexClass.PlainClass) */ {
 public:
  inline ComplexClass_PlainClass() : ComplexClass_PlainClass(nullptr) {}
  ~ComplexClass_PlainClass() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR ComplexClass_PlainClass(
      ::google::protobuf::internal::ConstantInitialized);

  inline ComplexClass_PlainClass(const ComplexClass_PlainClass& from) : ComplexClass_PlainClass(nullptr, from) {}
  inline ComplexClass_PlainClass(ComplexClass_PlainClass&& from) noexcept
      : ComplexClass_PlainClass(nullptr, std::move(from)) {}
  inline ComplexClass_PlainClass& operator=(const ComplexClass_PlainClass& from) {
    CopyFrom(from);
    return *this;
  }
  inline ComplexClass_PlainClass& operator=(ComplexClass_PlainClass&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ComplexClass_PlainClass& default_instance() {
    return *internal_default_instance();
  }
  static inline const ComplexClass_PlainClass* internal_default_instance() {
    return reinterpret_cast<const ComplexClass_PlainClass*>(
        &_ComplexClass_PlainClass_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 1;
  friend void swap(ComplexClass_PlainClass& a, ComplexClass_PlainClass& b) { a.Swap(&b); }
  inline void Swap(ComplexClass_PlainClass* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ComplexClass_PlainClass* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ComplexClass_PlainClass* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<ComplexClass_PlainClass>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const ComplexClass_PlainClass& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const ComplexClass_PlainClass& from) { ComplexClass_PlainClass::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(ComplexClass_PlainClass* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "complexbenchmarking.ComplexClass.PlainClass"; }

 protected:
  explicit ComplexClass_PlainClass(::google::protobuf::Arena* arena);
  ComplexClass_PlainClass(::google::protobuf::Arena* arena, const ComplexClass_PlainClass& from);
  ComplexClass_PlainClass(::google::protobuf::Arena* arena, ComplexClass_PlainClass&& from) noexcept
      : ComplexClass_PlainClass(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::MessageLite::ClassData* GetClassData()
      const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const final;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kMyMapFieldNumber = 2,
    kNameFieldNumber = 1,
  };
  // map<int32, string> my_map = 2;
  int my_map_size() const;
  private:
  int _internal_my_map_size() const;

  public:
  void clear_my_map() ;
  const ::google::protobuf::Map<::int32_t, std::string>& my_map() const;
  ::google::protobuf::Map<::int32_t, std::string>* mutable_my_map();

  private:
  const ::google::protobuf::Map<::int32_t, std::string>& _internal_my_map() const;
  ::google::protobuf::Map<::int32_t, std::string>* _internal_mutable_my_map();

  public:
  // optional string name = 1;
  bool has_name() const;
  void clear_name() ;
  const std::string& name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_name(Arg_&& arg, Args_... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* value);

  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(
      const std::string& value);
  std::string* _internal_mutable_name();

  public:
  // @@protoc_insertion_point(class_scope:complexbenchmarking.ComplexClass.PlainClass)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 2, 1,
      62, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::MapField<ComplexClass_PlainClass_MyMapEntry_DoNotUse, ::int32_t, std::string,
                      ::google::protobuf::internal::WireFormatLite::TYPE_INT32,
                      ::google::protobuf::internal::WireFormatLite::TYPE_STRING>
        my_map_;
    ::google::protobuf::internal::ArenaStringPtr name_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Complex_2eproto;
};
// -------------------------------------------------------------------

class ComplexClass_InnerIntMap final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:complexbenchmarking.ComplexClass.InnerIntMap) */ {
 public:
  inline ComplexClass_InnerIntMap() : ComplexClass_InnerIntMap(nullptr) {}
  ~ComplexClass_InnerIntMap() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR ComplexClass_InnerIntMap(
      ::google::protobuf::internal::ConstantInitialized);

  inline ComplexClass_InnerIntMap(const ComplexClass_InnerIntMap& from) : ComplexClass_InnerIntMap(nullptr, from) {}
  inline ComplexClass_InnerIntMap(ComplexClass_InnerIntMap&& from) noexcept
      : ComplexClass_InnerIntMap(nullptr, std::move(from)) {}
  inline ComplexClass_InnerIntMap& operator=(const ComplexClass_InnerIntMap& from) {
    CopyFrom(from);
    return *this;
  }
  inline ComplexClass_InnerIntMap& operator=(ComplexClass_InnerIntMap&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ComplexClass_InnerIntMap& default_instance() {
    return *internal_default_instance();
  }
  static inline const ComplexClass_InnerIntMap* internal_default_instance() {
    return reinterpret_cast<const ComplexClass_InnerIntMap*>(
        &_ComplexClass_InnerIntMap_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 3;
  friend void swap(ComplexClass_InnerIntMap& a, ComplexClass_InnerIntMap& b) { a.Swap(&b); }
  inline void Swap(ComplexClass_InnerIntMap* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ComplexClass_InnerIntMap* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ComplexClass_InnerIntMap* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<ComplexClass_InnerIntMap>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const ComplexClass_InnerIntMap& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const ComplexClass_InnerIntMap& from) { ComplexClass_InnerIntMap::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(ComplexClass_InnerIntMap* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "complexbenchmarking.ComplexClass.InnerIntMap"; }

 protected:
  explicit ComplexClass_InnerIntMap(::google::protobuf::Arena* arena);
  ComplexClass_InnerIntMap(::google::protobuf::Arena* arena, const ComplexClass_InnerIntMap& from);
  ComplexClass_InnerIntMap(::google::protobuf::Arena* arena, ComplexClass_InnerIntMap&& from) noexcept
      : ComplexClass_InnerIntMap(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::MessageLite::ClassData* GetClassData()
      const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const final;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kMMapFieldNumber = 1,
  };
  // map<int32, int32> m_map = 1;
  int m_map_size() const;
  private:
  int _internal_m_map_size() const;

  public:
  void clear_m_map() ;
  const ::google::protobuf::Map<::int32_t, ::int32_t>& m_map() const;
  ::google::protobuf::Map<::int32_t, ::int32_t>* mutable_m_map();

  private:
  const ::google::protobuf::Map<::int32_t, ::int32_t>& _internal_m_map() const;
  ::google::protobuf::Map<::int32_t, ::int32_t>* _internal_mutable_m_map();

  public:
  // @@protoc_insertion_point(class_scope:complexbenchmarking.ComplexClass.InnerIntMap)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 1,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::MapField<ComplexClass_InnerIntMap_MMapEntry_DoNotUse, ::int32_t, ::int32_t,
                      ::google::protobuf::internal::WireFormatLite::TYPE_INT32,
                      ::google::protobuf::internal::WireFormatLite::TYPE_INT32>
        m_map_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Complex_2eproto;
};
// -------------------------------------------------------------------

class ComplexClass_IntMapEntry_DoNotUse final
    : public ::google::protobuf::internal::MapEntry<
          ComplexClass_IntMapEntry_DoNotUse, ::int32_t, ::complexbenchmarking::ComplexClass_InnerIntMap,
          ::google::protobuf::internal::WireFormatLite::TYPE_INT32,
          ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE> {
 public:
  using SuperType = ::google::protobuf::internal::MapEntry<
      ComplexClass_IntMapEntry_DoNotUse, ::int32_t, ::complexbenchmarking::ComplexClass_InnerIntMap,
      ::google::protobuf::internal::WireFormatLite::TYPE_INT32,
      ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE>;
  ComplexClass_IntMapEntry_DoNotUse();
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR ComplexClass_IntMapEntry_DoNotUse(
      ::google::protobuf::internal::ConstantInitialized);
  explicit ComplexClass_IntMapEntry_DoNotUse(::google::protobuf::Arena* arena);
  static const ComplexClass_IntMapEntry_DoNotUse* internal_default_instance() {
    return reinterpret_cast<const ComplexClass_IntMapEntry_DoNotUse*>(
        &_ComplexClass_IntMapEntry_DoNotUse_default_instance_);
  }
  static bool ValidateKey(void*) { return true; }
  static bool ValidateValue(void*) { return true; }
  ::google::protobuf::Metadata GetMetadata() const final;
  friend struct ::TableStruct_Complex_2eproto;
};
// -------------------------------------------------------------------

class ComplexClass_InnerPlainClassMap_MyMapEntry_DoNotUse final
    : public ::google::protobuf::internal::MapEntry<
          ComplexClass_InnerPlainClassMap_MyMapEntry_DoNotUse, ::int32_t, ::complexbenchmarking::ComplexClass_PlainClass,
          ::google::protobuf::internal::WireFormatLite::TYPE_INT32,
          ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE> {
 public:
  using SuperType = ::google::protobuf::internal::MapEntry<
      ComplexClass_InnerPlainClassMap_MyMapEntry_DoNotUse, ::int32_t, ::complexbenchmarking::ComplexClass_PlainClass,
      ::google::protobuf::internal::WireFormatLite::TYPE_INT32,
      ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE>;
  ComplexClass_InnerPlainClassMap_MyMapEntry_DoNotUse();
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR ComplexClass_InnerPlainClassMap_MyMapEntry_DoNotUse(
      ::google::protobuf::internal::ConstantInitialized);
  explicit ComplexClass_InnerPlainClassMap_MyMapEntry_DoNotUse(::google::protobuf::Arena* arena);
  static const ComplexClass_InnerPlainClassMap_MyMapEntry_DoNotUse* internal_default_instance() {
    return reinterpret_cast<const ComplexClass_InnerPlainClassMap_MyMapEntry_DoNotUse*>(
        &_ComplexClass_InnerPlainClassMap_MyMapEntry_DoNotUse_default_instance_);
  }
  static bool ValidateKey(void*) { return true; }
  static bool ValidateValue(void*) { return true; }
  ::google::protobuf::Metadata GetMetadata() const final;
  friend struct ::TableStruct_Complex_2eproto;
};
// -------------------------------------------------------------------

class ComplexClass_InnerPlainClassMap final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:complexbenchmarking.ComplexClass.InnerPlainClassMap) */ {
 public:
  inline ComplexClass_InnerPlainClassMap() : ComplexClass_InnerPlainClassMap(nullptr) {}
  ~ComplexClass_InnerPlainClassMap() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR ComplexClass_InnerPlainClassMap(
      ::google::protobuf::internal::ConstantInitialized);

  inline ComplexClass_InnerPlainClassMap(const ComplexClass_InnerPlainClassMap& from) : ComplexClass_InnerPlainClassMap(nullptr, from) {}
  inline ComplexClass_InnerPlainClassMap(ComplexClass_InnerPlainClassMap&& from) noexcept
      : ComplexClass_InnerPlainClassMap(nullptr, std::move(from)) {}
  inline ComplexClass_InnerPlainClassMap& operator=(const ComplexClass_InnerPlainClassMap& from) {
    CopyFrom(from);
    return *this;
  }
  inline ComplexClass_InnerPlainClassMap& operator=(ComplexClass_InnerPlainClassMap&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ComplexClass_InnerPlainClassMap& default_instance() {
    return *internal_default_instance();
  }
  static inline const ComplexClass_InnerPlainClassMap* internal_default_instance() {
    return reinterpret_cast<const ComplexClass_InnerPlainClassMap*>(
        &_ComplexClass_InnerPlainClassMap_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 5;
  friend void swap(ComplexClass_InnerPlainClassMap& a, ComplexClass_InnerPlainClassMap& b) { a.Swap(&b); }
  inline void Swap(ComplexClass_InnerPlainClassMap* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ComplexClass_InnerPlainClassMap* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ComplexClass_InnerPlainClassMap* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<ComplexClass_InnerPlainClassMap>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const ComplexClass_InnerPlainClassMap& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const ComplexClass_InnerPlainClassMap& from) { ComplexClass_InnerPlainClassMap::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(ComplexClass_InnerPlainClassMap* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "complexbenchmarking.ComplexClass.InnerPlainClassMap"; }

 protected:
  explicit ComplexClass_InnerPlainClassMap(::google::protobuf::Arena* arena);
  ComplexClass_InnerPlainClassMap(::google::protobuf::Arena* arena, const ComplexClass_InnerPlainClassMap& from);
  ComplexClass_InnerPlainClassMap(::google::protobuf::Arena* arena, ComplexClass_InnerPlainClassMap&& from) noexcept
      : ComplexClass_InnerPlainClassMap(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::MessageLite::ClassData* GetClassData()
      const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const final;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kMyMapFieldNumber = 1,
  };
  // map<int32, .complexbenchmarking.ComplexClass.PlainClass> my_map = 1;
  int my_map_size() const;
  private:
  int _internal_my_map_size() const;

  public:
  void clear_my_map() ;
  const ::google::protobuf::Map<::int32_t, ::complexbenchmarking::ComplexClass_PlainClass>& my_map() const;
  ::google::protobuf::Map<::int32_t, ::complexbenchmarking::ComplexClass_PlainClass>* mutable_my_map();

  private:
  const ::google::protobuf::Map<::int32_t, ::complexbenchmarking::ComplexClass_PlainClass>& _internal_my_map() const;
  ::google::protobuf::Map<::int32_t, ::complexbenchmarking::ComplexClass_PlainClass>* _internal_mutable_my_map();

  public:
  // @@protoc_insertion_point(class_scope:complexbenchmarking.ComplexClass.InnerPlainClassMap)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 2,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::MapField<ComplexClass_InnerPlainClassMap_MyMapEntry_DoNotUse, ::int32_t, ::complexbenchmarking::ComplexClass_PlainClass,
                      ::google::protobuf::internal::WireFormatLite::TYPE_INT32,
                      ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE>
        my_map_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Complex_2eproto;
};
// -------------------------------------------------------------------

class ComplexClass_InnerPlainClassMapArray final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:complexbenchmarking.ComplexClass.InnerPlainClassMapArray) */ {
 public:
  inline ComplexClass_InnerPlainClassMapArray() : ComplexClass_InnerPlainClassMapArray(nullptr) {}
  ~ComplexClass_InnerPlainClassMapArray() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR ComplexClass_InnerPlainClassMapArray(
      ::google::protobuf::internal::ConstantInitialized);

  inline ComplexClass_InnerPlainClassMapArray(const ComplexClass_InnerPlainClassMapArray& from) : ComplexClass_InnerPlainClassMapArray(nullptr, from) {}
  inline ComplexClass_InnerPlainClassMapArray(ComplexClass_InnerPlainClassMapArray&& from) noexcept
      : ComplexClass_InnerPlainClassMapArray(nullptr, std::move(from)) {}
  inline ComplexClass_InnerPlainClassMapArray& operator=(const ComplexClass_InnerPlainClassMapArray& from) {
    CopyFrom(from);
    return *this;
  }
  inline ComplexClass_InnerPlainClassMapArray& operator=(ComplexClass_InnerPlainClassMapArray&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ComplexClass_InnerPlainClassMapArray& default_instance() {
    return *internal_default_instance();
  }
  static inline const ComplexClass_InnerPlainClassMapArray* internal_default_instance() {
    return reinterpret_cast<const ComplexClass_InnerPlainClassMapArray*>(
        &_ComplexClass_InnerPlainClassMapArray_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 6;
  friend void swap(ComplexClass_InnerPlainClassMapArray& a, ComplexClass_InnerPlainClassMapArray& b) { a.Swap(&b); }
  inline void Swap(ComplexClass_InnerPlainClassMapArray* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ComplexClass_InnerPlainClassMapArray* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ComplexClass_InnerPlainClassMapArray* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<ComplexClass_InnerPlainClassMapArray>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const ComplexClass_InnerPlainClassMapArray& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const ComplexClass_InnerPlainClassMapArray& from) { ComplexClass_InnerPlainClassMapArray::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(ComplexClass_InnerPlainClassMapArray* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "complexbenchmarking.ComplexClass.InnerPlainClassMapArray"; }

 protected:
  explicit ComplexClass_InnerPlainClassMapArray(::google::protobuf::Arena* arena);
  ComplexClass_InnerPlainClassMapArray(::google::protobuf::Arena* arena, const ComplexClass_InnerPlainClassMapArray& from);
  ComplexClass_InnerPlainClassMapArray(::google::protobuf::Arena* arena, ComplexClass_InnerPlainClassMapArray&& from) noexcept
      : ComplexClass_InnerPlainClassMapArray(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::MessageLite::ClassData* GetClassData()
      const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const final;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kMyMapsFieldNumber = 1,
  };
  // optional .complexbenchmarking.ComplexClass.InnerPlainClassMap my_maps = 1;
  bool has_my_maps() const;
  void clear_my_maps() ;
  const ::complexbenchmarking::ComplexClass_InnerPlainClassMap& my_maps() const;
  PROTOBUF_NODISCARD ::complexbenchmarking::ComplexClass_InnerPlainClassMap* release_my_maps();
  ::complexbenchmarking::ComplexClass_InnerPlainClassMap* mutable_my_maps();
  void set_allocated_my_maps(::complexbenchmarking::ComplexClass_InnerPlainClassMap* value);
  void unsafe_arena_set_allocated_my_maps(::complexbenchmarking::ComplexClass_InnerPlainClassMap* value);
  ::complexbenchmarking::ComplexClass_InnerPlainClassMap* unsafe_arena_release_my_maps();

  private:
  const ::complexbenchmarking::ComplexClass_InnerPlainClassMap& _internal_my_maps() const;
  ::complexbenchmarking::ComplexClass_InnerPlainClassMap* _internal_mutable_my_maps();

  public:
  // @@protoc_insertion_point(class_scope:complexbenchmarking.ComplexClass.InnerPlainClassMapArray)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 1,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::complexbenchmarking::ComplexClass_InnerPlainClassMap* my_maps_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Complex_2eproto;
};
// -------------------------------------------------------------------

class ComplexClass final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:complexbenchmarking.ComplexClass) */ {
 public:
  inline ComplexClass() : ComplexClass(nullptr) {}
  ~ComplexClass() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR ComplexClass(
      ::google::protobuf::internal::ConstantInitialized);

  inline ComplexClass(const ComplexClass& from) : ComplexClass(nullptr, from) {}
  inline ComplexClass(ComplexClass&& from) noexcept
      : ComplexClass(nullptr, std::move(from)) {}
  inline ComplexClass& operator=(const ComplexClass& from) {
    CopyFrom(from);
    return *this;
  }
  inline ComplexClass& operator=(ComplexClass&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ComplexClass& default_instance() {
    return *internal_default_instance();
  }
  static inline const ComplexClass* internal_default_instance() {
    return reinterpret_cast<const ComplexClass*>(
        &_ComplexClass_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 8;
  friend void swap(ComplexClass& a, ComplexClass& b) { a.Swap(&b); }
  inline void Swap(ComplexClass* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ComplexClass* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ComplexClass* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<ComplexClass>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const ComplexClass& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const ComplexClass& from) { ComplexClass::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(ComplexClass* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "complexbenchmarking.ComplexClass"; }

 protected:
  explicit ComplexClass(::google::protobuf::Arena* arena);
  ComplexClass(::google::protobuf::Arena* arena, const ComplexClass& from);
  ComplexClass(::google::protobuf::Arena* arena, ComplexClass&& from) noexcept
      : ComplexClass(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::MessageLite::ClassData* GetClassData()
      const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const final;
  // nested types ----------------------------------------------------
  using PlainClass = ComplexClass_PlainClass;
  using InnerIntMap = ComplexClass_InnerIntMap;
  using InnerPlainClassMap = ComplexClass_InnerPlainClassMap;
  using InnerPlainClassMapArray = ComplexClass_InnerPlainClassMapArray;

  // accessors -------------------------------------------------------
  enum : int {
    kIntMapFieldNumber = 4,
    kPlainClassMapFieldNumber = 5,
    kNameFieldNumber = 3,
    kIdFieldNumber = 1,
    kCountFieldNumber = 2,
  };
  // map<int32, .complexbenchmarking.ComplexClass.InnerIntMap> int_map = 4;
  int int_map_size() const;
  private:
  int _internal_int_map_size() const;

  public:
  void clear_int_map() ;
  const ::google::protobuf::Map<::int32_t, ::complexbenchmarking::ComplexClass_InnerIntMap>& int_map() const;
  ::google::protobuf::Map<::int32_t, ::complexbenchmarking::ComplexClass_InnerIntMap>* mutable_int_map();

  private:
  const ::google::protobuf::Map<::int32_t, ::complexbenchmarking::ComplexClass_InnerIntMap>& _internal_int_map() const;
  ::google::protobuf::Map<::int32_t, ::complexbenchmarking::ComplexClass_InnerIntMap>* _internal_mutable_int_map();

  public:
  // repeated .complexbenchmarking.ComplexClass.InnerPlainClassMapArray plain_class_map = 5;
  int plain_class_map_size() const;
  private:
  int _internal_plain_class_map_size() const;

  public:
  void clear_plain_class_map() ;
  ::complexbenchmarking::ComplexClass_InnerPlainClassMapArray* mutable_plain_class_map(int index);
  ::google::protobuf::RepeatedPtrField< ::complexbenchmarking::ComplexClass_InnerPlainClassMapArray >*
      mutable_plain_class_map();
  private:
  const ::google::protobuf::RepeatedPtrField<::complexbenchmarking::ComplexClass_InnerPlainClassMapArray>& _internal_plain_class_map() const;
  ::google::protobuf::RepeatedPtrField<::complexbenchmarking::ComplexClass_InnerPlainClassMapArray>* _internal_mutable_plain_class_map();
  public:
  const ::complexbenchmarking::ComplexClass_InnerPlainClassMapArray& plain_class_map(int index) const;
  ::complexbenchmarking::ComplexClass_InnerPlainClassMapArray* add_plain_class_map();
  const ::google::protobuf::RepeatedPtrField< ::complexbenchmarking::ComplexClass_InnerPlainClassMapArray >&
      plain_class_map() const;
  // optional string name = 3;
  bool has_name() const;
  void clear_name() ;
  const std::string& name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_name(Arg_&& arg, Args_... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* value);

  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(
      const std::string& value);
  std::string* _internal_mutable_name();

  public:
  // optional int32 id = 1;
  bool has_id() const;
  void clear_id() ;
  ::int32_t id() const;
  void set_id(::int32_t value);

  private:
  ::int32_t _internal_id() const;
  void _internal_set_id(::int32_t value);

  public:
  // optional int32 count = 2;
  bool has_count() const;
  void clear_count() ;
  ::int32_t count() const;
  void set_count(::int32_t value);

  private:
  ::int32_t _internal_count() const;
  void _internal_set_count(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:complexbenchmarking.ComplexClass)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 5, 3,
      45, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::MapField<ComplexClass_IntMapEntry_DoNotUse, ::int32_t, ::complexbenchmarking::ComplexClass_InnerIntMap,
                      ::google::protobuf::internal::WireFormatLite::TYPE_INT32,
                      ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE>
        int_map_;
    ::google::protobuf::RepeatedPtrField< ::complexbenchmarking::ComplexClass_InnerPlainClassMapArray > plain_class_map_;
    ::google::protobuf::internal::ArenaStringPtr name_;
    ::int32_t id_;
    ::int32_t count_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Complex_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// ComplexClass_PlainClass

// optional string name = 1;
inline bool ComplexClass_PlainClass::has_name() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void ComplexClass_PlainClass::clear_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.name_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ComplexClass_PlainClass::name() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:complexbenchmarking.ComplexClass.PlainClass.name)
  return _internal_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ComplexClass_PlainClass::set_name(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.name_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:complexbenchmarking.ComplexClass.PlainClass.name)
}
inline std::string* ComplexClass_PlainClass::mutable_name() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:complexbenchmarking.ComplexClass.PlainClass.name)
  return _s;
}
inline const std::string& ComplexClass_PlainClass::_internal_name() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.name_.Get();
}
inline void ComplexClass_PlainClass::_internal_set_name(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.name_.Set(value, GetArena());
}
inline std::string* ComplexClass_PlainClass::_internal_mutable_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.name_.Mutable( GetArena());
}
inline std::string* ComplexClass_PlainClass::release_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:complexbenchmarking.ComplexClass.PlainClass.name)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.name_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.name_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void ComplexClass_PlainClass::set_allocated_name(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.name_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.name_.IsDefault()) {
          _impl_.name_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:complexbenchmarking.ComplexClass.PlainClass.name)
}

// map<int32, string> my_map = 2;
inline int ComplexClass_PlainClass::_internal_my_map_size() const {
  return _internal_my_map().size();
}
inline int ComplexClass_PlainClass::my_map_size() const {
  return _internal_my_map_size();
}
inline void ComplexClass_PlainClass::clear_my_map() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.my_map_.Clear();
}
inline const ::google::protobuf::Map<::int32_t, std::string>& ComplexClass_PlainClass::_internal_my_map() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.my_map_.GetMap();
}
inline const ::google::protobuf::Map<::int32_t, std::string>& ComplexClass_PlainClass::my_map() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_map:complexbenchmarking.ComplexClass.PlainClass.my_map)
  return _internal_my_map();
}
inline ::google::protobuf::Map<::int32_t, std::string>* ComplexClass_PlainClass::_internal_mutable_my_map() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _impl_.my_map_.MutableMap();
}
inline ::google::protobuf::Map<::int32_t, std::string>* ComplexClass_PlainClass::mutable_my_map() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_map:complexbenchmarking.ComplexClass.PlainClass.my_map)
  return _internal_mutable_my_map();
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// ComplexClass_InnerIntMap

// map<int32, int32> m_map = 1;
inline int ComplexClass_InnerIntMap::_internal_m_map_size() const {
  return _internal_m_map().size();
}
inline int ComplexClass_InnerIntMap::m_map_size() const {
  return _internal_m_map_size();
}
inline void ComplexClass_InnerIntMap::clear_m_map() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.m_map_.Clear();
}
inline const ::google::protobuf::Map<::int32_t, ::int32_t>& ComplexClass_InnerIntMap::_internal_m_map() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.m_map_.GetMap();
}
inline const ::google::protobuf::Map<::int32_t, ::int32_t>& ComplexClass_InnerIntMap::m_map() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_map:complexbenchmarking.ComplexClass.InnerIntMap.m_map)
  return _internal_m_map();
}
inline ::google::protobuf::Map<::int32_t, ::int32_t>* ComplexClass_InnerIntMap::_internal_mutable_m_map() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _impl_.m_map_.MutableMap();
}
inline ::google::protobuf::Map<::int32_t, ::int32_t>* ComplexClass_InnerIntMap::mutable_m_map() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_map:complexbenchmarking.ComplexClass.InnerIntMap.m_map)
  return _internal_mutable_m_map();
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// ComplexClass_InnerPlainClassMap

// map<int32, .complexbenchmarking.ComplexClass.PlainClass> my_map = 1;
inline int ComplexClass_InnerPlainClassMap::_internal_my_map_size() const {
  return _internal_my_map().size();
}
inline int ComplexClass_InnerPlainClassMap::my_map_size() const {
  return _internal_my_map_size();
}
inline void ComplexClass_InnerPlainClassMap::clear_my_map() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.my_map_.Clear();
}
inline const ::google::protobuf::Map<::int32_t, ::complexbenchmarking::ComplexClass_PlainClass>& ComplexClass_InnerPlainClassMap::_internal_my_map() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.my_map_.GetMap();
}
inline const ::google::protobuf::Map<::int32_t, ::complexbenchmarking::ComplexClass_PlainClass>& ComplexClass_InnerPlainClassMap::my_map() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_map:complexbenchmarking.ComplexClass.InnerPlainClassMap.my_map)
  return _internal_my_map();
}
inline ::google::protobuf::Map<::int32_t, ::complexbenchmarking::ComplexClass_PlainClass>* ComplexClass_InnerPlainClassMap::_internal_mutable_my_map() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _impl_.my_map_.MutableMap();
}
inline ::google::protobuf::Map<::int32_t, ::complexbenchmarking::ComplexClass_PlainClass>* ComplexClass_InnerPlainClassMap::mutable_my_map() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_map:complexbenchmarking.ComplexClass.InnerPlainClassMap.my_map)
  return _internal_mutable_my_map();
}

// -------------------------------------------------------------------

// ComplexClass_InnerPlainClassMapArray

// optional .complexbenchmarking.ComplexClass.InnerPlainClassMap my_maps = 1;
inline bool ComplexClass_InnerPlainClassMapArray::has_my_maps() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.my_maps_ != nullptr);
  return value;
}
inline void ComplexClass_InnerPlainClassMapArray::clear_my_maps() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.my_maps_ != nullptr) _impl_.my_maps_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::complexbenchmarking::ComplexClass_InnerPlainClassMap& ComplexClass_InnerPlainClassMapArray::_internal_my_maps() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::complexbenchmarking::ComplexClass_InnerPlainClassMap* p = _impl_.my_maps_;
  return p != nullptr ? *p : reinterpret_cast<const ::complexbenchmarking::ComplexClass_InnerPlainClassMap&>(::complexbenchmarking::_ComplexClass_InnerPlainClassMap_default_instance_);
}
inline const ::complexbenchmarking::ComplexClass_InnerPlainClassMap& ComplexClass_InnerPlainClassMapArray::my_maps() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:complexbenchmarking.ComplexClass.InnerPlainClassMapArray.my_maps)
  return _internal_my_maps();
}
inline void ComplexClass_InnerPlainClassMapArray::unsafe_arena_set_allocated_my_maps(::complexbenchmarking::ComplexClass_InnerPlainClassMap* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.my_maps_);
  }
  _impl_.my_maps_ = reinterpret_cast<::complexbenchmarking::ComplexClass_InnerPlainClassMap*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:complexbenchmarking.ComplexClass.InnerPlainClassMapArray.my_maps)
}
inline ::complexbenchmarking::ComplexClass_InnerPlainClassMap* ComplexClass_InnerPlainClassMapArray::release_my_maps() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::complexbenchmarking::ComplexClass_InnerPlainClassMap* released = _impl_.my_maps_;
  _impl_.my_maps_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::complexbenchmarking::ComplexClass_InnerPlainClassMap* ComplexClass_InnerPlainClassMapArray::unsafe_arena_release_my_maps() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:complexbenchmarking.ComplexClass.InnerPlainClassMapArray.my_maps)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::complexbenchmarking::ComplexClass_InnerPlainClassMap* temp = _impl_.my_maps_;
  _impl_.my_maps_ = nullptr;
  return temp;
}
inline ::complexbenchmarking::ComplexClass_InnerPlainClassMap* ComplexClass_InnerPlainClassMapArray::_internal_mutable_my_maps() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.my_maps_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::complexbenchmarking::ComplexClass_InnerPlainClassMap>(GetArena());
    _impl_.my_maps_ = reinterpret_cast<::complexbenchmarking::ComplexClass_InnerPlainClassMap*>(p);
  }
  return _impl_.my_maps_;
}
inline ::complexbenchmarking::ComplexClass_InnerPlainClassMap* ComplexClass_InnerPlainClassMapArray::mutable_my_maps() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::complexbenchmarking::ComplexClass_InnerPlainClassMap* _msg = _internal_mutable_my_maps();
  // @@protoc_insertion_point(field_mutable:complexbenchmarking.ComplexClass.InnerPlainClassMapArray.my_maps)
  return _msg;
}
inline void ComplexClass_InnerPlainClassMapArray::set_allocated_my_maps(::complexbenchmarking::ComplexClass_InnerPlainClassMap* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete (_impl_.my_maps_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.my_maps_ = reinterpret_cast<::complexbenchmarking::ComplexClass_InnerPlainClassMap*>(value);
  // @@protoc_insertion_point(field_set_allocated:complexbenchmarking.ComplexClass.InnerPlainClassMapArray.my_maps)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// ComplexClass

// optional int32 id = 1;
inline bool ComplexClass::has_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void ComplexClass::clear_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.id_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::int32_t ComplexClass::id() const {
  // @@protoc_insertion_point(field_get:complexbenchmarking.ComplexClass.id)
  return _internal_id();
}
inline void ComplexClass::set_id(::int32_t value) {
  _internal_set_id(value);
  _impl_._has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_set:complexbenchmarking.ComplexClass.id)
}
inline ::int32_t ComplexClass::_internal_id() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.id_;
}
inline void ComplexClass::_internal_set_id(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.id_ = value;
}

// optional int32 count = 2;
inline bool ComplexClass::has_count() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void ComplexClass::clear_count() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.count_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::int32_t ComplexClass::count() const {
  // @@protoc_insertion_point(field_get:complexbenchmarking.ComplexClass.count)
  return _internal_count();
}
inline void ComplexClass::set_count(::int32_t value) {
  _internal_set_count(value);
  _impl_._has_bits_[0] |= 0x00000004u;
  // @@protoc_insertion_point(field_set:complexbenchmarking.ComplexClass.count)
}
inline ::int32_t ComplexClass::_internal_count() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.count_;
}
inline void ComplexClass::_internal_set_count(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.count_ = value;
}

// optional string name = 3;
inline bool ComplexClass::has_name() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void ComplexClass::clear_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.name_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ComplexClass::name() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:complexbenchmarking.ComplexClass.name)
  return _internal_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ComplexClass::set_name(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.name_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:complexbenchmarking.ComplexClass.name)
}
inline std::string* ComplexClass::mutable_name() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:complexbenchmarking.ComplexClass.name)
  return _s;
}
inline const std::string& ComplexClass::_internal_name() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.name_.Get();
}
inline void ComplexClass::_internal_set_name(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.name_.Set(value, GetArena());
}
inline std::string* ComplexClass::_internal_mutable_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.name_.Mutable( GetArena());
}
inline std::string* ComplexClass::release_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:complexbenchmarking.ComplexClass.name)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.name_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.name_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void ComplexClass::set_allocated_name(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.name_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.name_.IsDefault()) {
          _impl_.name_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:complexbenchmarking.ComplexClass.name)
}

// map<int32, .complexbenchmarking.ComplexClass.InnerIntMap> int_map = 4;
inline int ComplexClass::_internal_int_map_size() const {
  return _internal_int_map().size();
}
inline int ComplexClass::int_map_size() const {
  return _internal_int_map_size();
}
inline void ComplexClass::clear_int_map() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.int_map_.Clear();
}
inline const ::google::protobuf::Map<::int32_t, ::complexbenchmarking::ComplexClass_InnerIntMap>& ComplexClass::_internal_int_map() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.int_map_.GetMap();
}
inline const ::google::protobuf::Map<::int32_t, ::complexbenchmarking::ComplexClass_InnerIntMap>& ComplexClass::int_map() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_map:complexbenchmarking.ComplexClass.int_map)
  return _internal_int_map();
}
inline ::google::protobuf::Map<::int32_t, ::complexbenchmarking::ComplexClass_InnerIntMap>* ComplexClass::_internal_mutable_int_map() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _impl_.int_map_.MutableMap();
}
inline ::google::protobuf::Map<::int32_t, ::complexbenchmarking::ComplexClass_InnerIntMap>* ComplexClass::mutable_int_map() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_map:complexbenchmarking.ComplexClass.int_map)
  return _internal_mutable_int_map();
}

// repeated .complexbenchmarking.ComplexClass.InnerPlainClassMapArray plain_class_map = 5;
inline int ComplexClass::_internal_plain_class_map_size() const {
  return _internal_plain_class_map().size();
}
inline int ComplexClass::plain_class_map_size() const {
  return _internal_plain_class_map_size();
}
inline void ComplexClass::clear_plain_class_map() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.plain_class_map_.Clear();
}
inline ::complexbenchmarking::ComplexClass_InnerPlainClassMapArray* ComplexClass::mutable_plain_class_map(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:complexbenchmarking.ComplexClass.plain_class_map)
  return _internal_mutable_plain_class_map()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::complexbenchmarking::ComplexClass_InnerPlainClassMapArray>* ComplexClass::mutable_plain_class_map()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:complexbenchmarking.ComplexClass.plain_class_map)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_plain_class_map();
}
inline const ::complexbenchmarking::ComplexClass_InnerPlainClassMapArray& ComplexClass::plain_class_map(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:complexbenchmarking.ComplexClass.plain_class_map)
  return _internal_plain_class_map().Get(index);
}
inline ::complexbenchmarking::ComplexClass_InnerPlainClassMapArray* ComplexClass::add_plain_class_map() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::complexbenchmarking::ComplexClass_InnerPlainClassMapArray* _add = _internal_mutable_plain_class_map()->Add();
  // @@protoc_insertion_point(field_add:complexbenchmarking.ComplexClass.plain_class_map)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::complexbenchmarking::ComplexClass_InnerPlainClassMapArray>& ComplexClass::plain_class_map() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:complexbenchmarking.ComplexClass.plain_class_map)
  return _internal_plain_class_map();
}
inline const ::google::protobuf::RepeatedPtrField<::complexbenchmarking::ComplexClass_InnerPlainClassMapArray>&
ComplexClass::_internal_plain_class_map() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.plain_class_map_;
}
inline ::google::protobuf::RepeatedPtrField<::complexbenchmarking::ComplexClass_InnerPlainClassMapArray>*
ComplexClass::_internal_mutable_plain_class_map() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.plain_class_map_;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace complexbenchmarking


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_Complex_2eproto_2epb_2eh
