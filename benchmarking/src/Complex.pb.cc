// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Complex.proto
// Protobuf C++ Version: 4.26.0-dev

#include "Complex.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
#include "google/protobuf/generated_message_tctable_impl.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::google::protobuf;
namespace _pbi = ::google::protobuf::internal;
namespace _fl = ::google::protobuf::internal::field_layout;
namespace complexbenchmarking {
      template <typename>
PROTOBUF_CONSTEXPR ComplexClass_PlainClass_MyMapEntry_DoNotUse::ComplexClass_PlainClass_MyMapEntry_DoNotUse(::_pbi::ConstantInitialized) {}
struct ComplexClass_PlainClass_MyMapEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ComplexClass_PlainClass_MyMapEntry_DoNotUseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ComplexClass_PlainClass_MyMapEntry_DoNotUseDefaultTypeInternal() {}
  union {
    ComplexClass_PlainClass_MyMapEntry_DoNotUse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ComplexClass_PlainClass_MyMapEntry_DoNotUseDefaultTypeInternal _ComplexClass_PlainClass_MyMapEntry_DoNotUse_default_instance_;
      template <typename>
PROTOBUF_CONSTEXPR ComplexClass_InnerIntMap_MMapEntry_DoNotUse::ComplexClass_InnerIntMap_MMapEntry_DoNotUse(::_pbi::ConstantInitialized) {}
struct ComplexClass_InnerIntMap_MMapEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ComplexClass_InnerIntMap_MMapEntry_DoNotUseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ComplexClass_InnerIntMap_MMapEntry_DoNotUseDefaultTypeInternal() {}
  union {
    ComplexClass_InnerIntMap_MMapEntry_DoNotUse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ComplexClass_InnerIntMap_MMapEntry_DoNotUseDefaultTypeInternal _ComplexClass_InnerIntMap_MMapEntry_DoNotUse_default_instance_;

inline constexpr ComplexClass_PlainClass::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        my_map_{},
        name_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()) {}

template <typename>
PROTOBUF_CONSTEXPR ComplexClass_PlainClass::ComplexClass_PlainClass(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct ComplexClass_PlainClassDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ComplexClass_PlainClassDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ComplexClass_PlainClassDefaultTypeInternal() {}
  union {
    ComplexClass_PlainClass _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ComplexClass_PlainClassDefaultTypeInternal _ComplexClass_PlainClass_default_instance_;

inline constexpr ComplexClass_InnerIntMap::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : m_map_{},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR ComplexClass_InnerIntMap::ComplexClass_InnerIntMap(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct ComplexClass_InnerIntMapDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ComplexClass_InnerIntMapDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ComplexClass_InnerIntMapDefaultTypeInternal() {}
  union {
    ComplexClass_InnerIntMap _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ComplexClass_InnerIntMapDefaultTypeInternal _ComplexClass_InnerIntMap_default_instance_;
      template <typename>
PROTOBUF_CONSTEXPR ComplexClass_IntMapEntry_DoNotUse::ComplexClass_IntMapEntry_DoNotUse(::_pbi::ConstantInitialized) {}
struct ComplexClass_IntMapEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ComplexClass_IntMapEntry_DoNotUseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ComplexClass_IntMapEntry_DoNotUseDefaultTypeInternal() {}
  union {
    ComplexClass_IntMapEntry_DoNotUse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ComplexClass_IntMapEntry_DoNotUseDefaultTypeInternal _ComplexClass_IntMapEntry_DoNotUse_default_instance_;
      template <typename>
PROTOBUF_CONSTEXPR ComplexClass_InnerPlainClassMap_MyMapEntry_DoNotUse::ComplexClass_InnerPlainClassMap_MyMapEntry_DoNotUse(::_pbi::ConstantInitialized) {}
struct ComplexClass_InnerPlainClassMap_MyMapEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ComplexClass_InnerPlainClassMap_MyMapEntry_DoNotUseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ComplexClass_InnerPlainClassMap_MyMapEntry_DoNotUseDefaultTypeInternal() {}
  union {
    ComplexClass_InnerPlainClassMap_MyMapEntry_DoNotUse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ComplexClass_InnerPlainClassMap_MyMapEntry_DoNotUseDefaultTypeInternal _ComplexClass_InnerPlainClassMap_MyMapEntry_DoNotUse_default_instance_;

inline constexpr ComplexClass_InnerPlainClassMap::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : my_map_{},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR ComplexClass_InnerPlainClassMap::ComplexClass_InnerPlainClassMap(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct ComplexClass_InnerPlainClassMapDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ComplexClass_InnerPlainClassMapDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ComplexClass_InnerPlainClassMapDefaultTypeInternal() {}
  union {
    ComplexClass_InnerPlainClassMap _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ComplexClass_InnerPlainClassMapDefaultTypeInternal _ComplexClass_InnerPlainClassMap_default_instance_;

inline constexpr ComplexClass_InnerPlainClassMapArray::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        my_maps_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR ComplexClass_InnerPlainClassMapArray::ComplexClass_InnerPlainClassMapArray(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct ComplexClass_InnerPlainClassMapArrayDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ComplexClass_InnerPlainClassMapArrayDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ComplexClass_InnerPlainClassMapArrayDefaultTypeInternal() {}
  union {
    ComplexClass_InnerPlainClassMapArray _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ComplexClass_InnerPlainClassMapArrayDefaultTypeInternal _ComplexClass_InnerPlainClassMapArray_default_instance_;

inline constexpr ComplexClass::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        int_map_{},
        plain_class_map_{},
        name_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        id_{0},
        count_{0} {}

template <typename>
PROTOBUF_CONSTEXPR ComplexClass::ComplexClass(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct ComplexClassDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ComplexClassDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ComplexClassDefaultTypeInternal() {}
  union {
    ComplexClass _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ComplexClassDefaultTypeInternal _ComplexClass_default_instance_;
}  // namespace complexbenchmarking
static ::_pb::Metadata file_level_metadata_Complex_2eproto[9];
static constexpr const ::_pb::EnumDescriptor**
    file_level_enum_descriptors_Complex_2eproto = nullptr;
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_Complex_2eproto = nullptr;
const ::uint32_t
    TableStruct_Complex_2eproto::offsets[] ABSL_ATTRIBUTE_SECTION_VARIABLE(
        protodesc_cold) = {
        PROTOBUF_FIELD_OFFSET(::complexbenchmarking::ComplexClass_PlainClass_MyMapEntry_DoNotUse, _has_bits_),
        PROTOBUF_FIELD_OFFSET(::complexbenchmarking::ComplexClass_PlainClass_MyMapEntry_DoNotUse, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::complexbenchmarking::ComplexClass_PlainClass_MyMapEntry_DoNotUse, key_),
        PROTOBUF_FIELD_OFFSET(::complexbenchmarking::ComplexClass_PlainClass_MyMapEntry_DoNotUse, value_),
        0,
        1,
        PROTOBUF_FIELD_OFFSET(::complexbenchmarking::ComplexClass_PlainClass, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::complexbenchmarking::ComplexClass_PlainClass, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::complexbenchmarking::ComplexClass_PlainClass, _impl_.name_),
        PROTOBUF_FIELD_OFFSET(::complexbenchmarking::ComplexClass_PlainClass, _impl_.my_map_),
        0,
        ~0u,
        PROTOBUF_FIELD_OFFSET(::complexbenchmarking::ComplexClass_InnerIntMap_MMapEntry_DoNotUse, _has_bits_),
        PROTOBUF_FIELD_OFFSET(::complexbenchmarking::ComplexClass_InnerIntMap_MMapEntry_DoNotUse, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::complexbenchmarking::ComplexClass_InnerIntMap_MMapEntry_DoNotUse, key_),
        PROTOBUF_FIELD_OFFSET(::complexbenchmarking::ComplexClass_InnerIntMap_MMapEntry_DoNotUse, value_),
        0,
        1,
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::complexbenchmarking::ComplexClass_InnerIntMap, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::complexbenchmarking::ComplexClass_InnerIntMap, _impl_.m_map_),
        PROTOBUF_FIELD_OFFSET(::complexbenchmarking::ComplexClass_InnerPlainClassMap_MyMapEntry_DoNotUse, _has_bits_),
        PROTOBUF_FIELD_OFFSET(::complexbenchmarking::ComplexClass_InnerPlainClassMap_MyMapEntry_DoNotUse, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::complexbenchmarking::ComplexClass_InnerPlainClassMap_MyMapEntry_DoNotUse, key_),
        PROTOBUF_FIELD_OFFSET(::complexbenchmarking::ComplexClass_InnerPlainClassMap_MyMapEntry_DoNotUse, value_),
        0,
        1,
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::complexbenchmarking::ComplexClass_InnerPlainClassMap, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::complexbenchmarking::ComplexClass_InnerPlainClassMap, _impl_.my_map_),
        PROTOBUF_FIELD_OFFSET(::complexbenchmarking::ComplexClass_InnerPlainClassMapArray, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::complexbenchmarking::ComplexClass_InnerPlainClassMapArray, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::complexbenchmarking::ComplexClass_InnerPlainClassMapArray, _impl_.my_maps_),
        0,
        PROTOBUF_FIELD_OFFSET(::complexbenchmarking::ComplexClass_IntMapEntry_DoNotUse, _has_bits_),
        PROTOBUF_FIELD_OFFSET(::complexbenchmarking::ComplexClass_IntMapEntry_DoNotUse, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::complexbenchmarking::ComplexClass_IntMapEntry_DoNotUse, key_),
        PROTOBUF_FIELD_OFFSET(::complexbenchmarking::ComplexClass_IntMapEntry_DoNotUse, value_),
        0,
        1,
        PROTOBUF_FIELD_OFFSET(::complexbenchmarking::ComplexClass, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::complexbenchmarking::ComplexClass, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::complexbenchmarking::ComplexClass, _impl_.id_),
        PROTOBUF_FIELD_OFFSET(::complexbenchmarking::ComplexClass, _impl_.count_),
        PROTOBUF_FIELD_OFFSET(::complexbenchmarking::ComplexClass, _impl_.name_),
        PROTOBUF_FIELD_OFFSET(::complexbenchmarking::ComplexClass, _impl_.int_map_),
        PROTOBUF_FIELD_OFFSET(::complexbenchmarking::ComplexClass, _impl_.plain_class_map_),
        1,
        2,
        0,
        ~0u,
        ~0u,
};

static const ::_pbi::MigrationSchema
    schemas[] ABSL_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
        {0, 10, -1, sizeof(::complexbenchmarking::ComplexClass_PlainClass_MyMapEntry_DoNotUse)},
        {12, 22, -1, sizeof(::complexbenchmarking::ComplexClass_PlainClass)},
        {24, 34, -1, sizeof(::complexbenchmarking::ComplexClass_InnerIntMap_MMapEntry_DoNotUse)},
        {36, -1, -1, sizeof(::complexbenchmarking::ComplexClass_InnerIntMap)},
        {45, 55, -1, sizeof(::complexbenchmarking::ComplexClass_InnerPlainClassMap_MyMapEntry_DoNotUse)},
        {57, -1, -1, sizeof(::complexbenchmarking::ComplexClass_InnerPlainClassMap)},
        {66, 75, -1, sizeof(::complexbenchmarking::ComplexClass_InnerPlainClassMapArray)},
        {76, 86, -1, sizeof(::complexbenchmarking::ComplexClass_IntMapEntry_DoNotUse)},
        {88, 101, -1, sizeof(::complexbenchmarking::ComplexClass)},
};

static const ::_pb::Message* const file_default_instances[] = {
    &::complexbenchmarking::_ComplexClass_PlainClass_MyMapEntry_DoNotUse_default_instance_._instance,
    &::complexbenchmarking::_ComplexClass_PlainClass_default_instance_._instance,
    &::complexbenchmarking::_ComplexClass_InnerIntMap_MMapEntry_DoNotUse_default_instance_._instance,
    &::complexbenchmarking::_ComplexClass_InnerIntMap_default_instance_._instance,
    &::complexbenchmarking::_ComplexClass_InnerPlainClassMap_MyMapEntry_DoNotUse_default_instance_._instance,
    &::complexbenchmarking::_ComplexClass_InnerPlainClassMap_default_instance_._instance,
    &::complexbenchmarking::_ComplexClass_InnerPlainClassMapArray_default_instance_._instance,
    &::complexbenchmarking::_ComplexClass_IntMapEntry_DoNotUse_default_instance_._instance,
    &::complexbenchmarking::_ComplexClass_default_instance_._instance,
};
const char descriptor_table_protodef_Complex_2eproto[] ABSL_ATTRIBUTE_SECTION_VARIABLE(
    protodesc_cold) = {
    "\n\rComplex.proto\022\023complexbenchmarking\"\350\006\n"
    "\014ComplexClass\022\n\n\002id\030\001 \001(\005\022\r\n\005count\030\002 \001(\005"
    "\022\014\n\004name\030\003 \001(\t\022>\n\007int_map\030\004 \003(\0132-.comple"
    "xbenchmarking.ComplexClass.IntMapEntry\022R"
    "\n\017plain_class_map\030\005 \003(\01329.complexbenchma"
    "rking.ComplexClass.InnerPlainClassMapArr"
    "ay\032\221\001\n\nPlainClass\022\014\n\004name\030\001 \001(\t\022G\n\006my_ma"
    "p\030\002 \003(\01327.complexbenchmarking.ComplexCla"
    "ss.PlainClass.MyMapEntry\032,\n\nMyMapEntry\022\013"
    "\n\003key\030\001 \001(\005\022\r\n\005value\030\002 \001(\t:\0028\001\032\202\001\n\013Inner"
    "IntMap\022F\n\005m_map\030\001 \003(\01327.complexbenchmark"
    "ing.ComplexClass.InnerIntMap.MMapEntry\032+"
    "\n\tMMapEntry\022\013\n\003key\030\001 \001(\005\022\r\n\005value\030\002 \001(\005:"
    "\0028\001\032\301\001\n\022InnerPlainClassMap\022O\n\006my_map\030\001 \003"
    "(\0132\?.complexbenchmarking.ComplexClass.In"
    "nerPlainClassMap.MyMapEntry\032Z\n\nMyMapEntr"
    "y\022\013\n\003key\030\001 \001(\005\022;\n\005value\030\002 \001(\0132,.complexb"
    "enchmarking.ComplexClass.PlainClass:\0028\001\032"
    "`\n\027InnerPlainClassMapArray\022E\n\007my_maps\030\001 "
    "\001(\01324.complexbenchmarking.ComplexClass.I"
    "nnerPlainClassMap\032\\\n\013IntMapEntry\022\013\n\003key\030"
    "\001 \001(\005\022<\n\005value\030\002 \001(\0132-.complexbenchmarki"
    "ng.ComplexClass.InnerIntMap:\0028\001"
};
static ::absl::once_flag descriptor_table_Complex_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_Complex_2eproto = {
    false,
    false,
    911,
    descriptor_table_protodef_Complex_2eproto,
    "Complex.proto",
    &descriptor_table_Complex_2eproto_once,
    nullptr,
    0,
    9,
    schemas,
    file_default_instances,
    TableStruct_Complex_2eproto::offsets,
    file_level_metadata_Complex_2eproto,
    file_level_enum_descriptors_Complex_2eproto,
    file_level_service_descriptors_Complex_2eproto,
};

// This function exists to be marked as weak.
// It can significantly speed up compilation by breaking up LLVM's SCC
// in the .pb.cc translation units. Large translation units see a
// reduction of more than 35% of walltime for optimized builds. Without
// the weak attribute all the messages in the file, including all the
// vtables and everything they use become part of the same SCC through
// a cycle like:
// GetMetadata -> descriptor table -> default instances ->
//   vtables -> GetMetadata
// By adding a weak function here we break the connection from the
// individual vtables back into the descriptor table.
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_Complex_2eproto_getter() {
  return &descriptor_table_Complex_2eproto;
}
// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2
static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_Complex_2eproto(&descriptor_table_Complex_2eproto);
namespace complexbenchmarking {
// ===================================================================

ComplexClass_PlainClass_MyMapEntry_DoNotUse::ComplexClass_PlainClass_MyMapEntry_DoNotUse() {}
ComplexClass_PlainClass_MyMapEntry_DoNotUse::ComplexClass_PlainClass_MyMapEntry_DoNotUse(::google::protobuf::Arena* arena)
    : SuperType(arena) {}
::google::protobuf::Metadata ComplexClass_PlainClass_MyMapEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Complex_2eproto_getter, &descriptor_table_Complex_2eproto_once,
      file_level_metadata_Complex_2eproto[0]);
}
// ===================================================================

class ComplexClass_PlainClass::_Internal {
 public:
  using HasBits = decltype(std::declval<ComplexClass_PlainClass>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(ComplexClass_PlainClass, _impl_._has_bits_);
};

ComplexClass_PlainClass::ComplexClass_PlainClass(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:complexbenchmarking.ComplexClass.PlainClass)
}
inline PROTOBUF_NDEBUG_INLINE ComplexClass_PlainClass::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        my_map_{visibility, arena, from.my_map_},
        name_(arena, from.name_) {}

ComplexClass_PlainClass::ComplexClass_PlainClass(
    ::google::protobuf::Arena* arena,
    const ComplexClass_PlainClass& from)
    : ::google::protobuf::Message(arena) {
  ComplexClass_PlainClass* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);

  // @@protoc_insertion_point(copy_constructor:complexbenchmarking.ComplexClass.PlainClass)
}
inline PROTOBUF_NDEBUG_INLINE ComplexClass_PlainClass::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        my_map_{visibility, arena},
        name_(arena) {}

inline void ComplexClass_PlainClass::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
}
ComplexClass_PlainClass::~ComplexClass_PlainClass() {
  // @@protoc_insertion_point(destructor:complexbenchmarking.ComplexClass.PlainClass)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void ComplexClass_PlainClass::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.name_.Destroy();
  _impl_.~Impl_();
}

const ::google::protobuf::MessageLite::ClassData*
ComplexClass_PlainClass::GetClassData() const {
  PROTOBUF_CONSTINIT static const ::google::protobuf::MessageLite::ClassData
      _data_ = {
          ComplexClass_PlainClass::MergeImpl,
           nullptr,  // OnDemandRegisterArenaDtor
           &::google::protobuf::Message::kDescriptorMethods,
              PROTOBUF_FIELD_OFFSET(ComplexClass_PlainClass, _impl_._cached_size_),
      };
  return &_data_;
}
PROTOBUF_NOINLINE void ComplexClass_PlainClass::Clear() {
// @@protoc_insertion_point(message_clear_start:complexbenchmarking.ComplexClass.PlainClass)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.my_map_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.name_.ClearNonDefaultToEmpty();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* ComplexClass_PlainClass::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 2, 1, 62, 2> ComplexClass_PlainClass::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(ComplexClass_PlainClass, _impl_._has_bits_),
    0, // no _extensions_
    2, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_ComplexClass_PlainClass_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::complexbenchmarking::ComplexClass_PlainClass>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // optional string name = 1;
    {::_pbi::TcParser::FastSS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(ComplexClass_PlainClass, _impl_.name_)}},
  }}, {{
    65535, 65535
  }}, {{
    // optional string name = 1;
    {PROTOBUF_FIELD_OFFSET(ComplexClass_PlainClass, _impl_.name_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kRawString | ::_fl::kRepAString)},
    // map<int32, string> my_map = 2;
    {PROTOBUF_FIELD_OFFSET(ComplexClass_PlainClass, _impl_.my_map_), -1, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kMap)},
  }}, {{
    {::_pbi::TcParser::GetMapAuxInfo<
        decltype(ComplexClass_PlainClass()._impl_.my_map_)>(
        0, 1, 0, 5,
        9)},
  }}, {{
    "\53\4\6\0\0\0\0\0"
    "complexbenchmarking.ComplexClass.PlainClass"
    "name"
    "my_map"
  }},
};

::uint8_t* ComplexClass_PlainClass::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:complexbenchmarking.ComplexClass.PlainClass)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    const std::string& _s = this->_internal_name();
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(_s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormat::SERIALIZE,
                                "complexbenchmarking.ComplexClass.PlainClass.name");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // map<int32, string> my_map = 2;
  if (!_internal_my_map().empty()) {
    using MapType = ::google::protobuf::Map<::int32_t, std::string>;
    using WireHelper = _pbi::MapEntryFuncs<::int32_t, std::string,
                                   _pbi::WireFormatLite::TYPE_INT32,
                                   _pbi::WireFormatLite::TYPE_STRING>;
    const auto& field = _internal_my_map();

    if (stream->IsSerializationDeterministic() && field.size() > 1) {
      for (const auto& entry : ::google::protobuf::internal::MapSorterFlat<MapType>(field)) {
        target = WireHelper::InternalSerialize(
            2, entry.first, entry.second, target, stream);
        ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(entry.second.data(), static_cast<int>(entry.second.length()),
 ::google::protobuf::internal::WireFormat::SERIALIZE,
                                    "complexbenchmarking.ComplexClass.PlainClass.my_map");
      }
    } else {
      for (const auto& entry : field) {
        target = WireHelper::InternalSerialize(
            2, entry.first, entry.second, target, stream);
        ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(entry.second.data(), static_cast<int>(entry.second.length()),
 ::google::protobuf::internal::WireFormat::SERIALIZE,
                                    "complexbenchmarking.ComplexClass.PlainClass.my_map");
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:complexbenchmarking.ComplexClass.PlainClass)
  return target;
}

::size_t ComplexClass_PlainClass::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:complexbenchmarking.ComplexClass.PlainClass)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<int32, string> my_map = 2;
  total_size += 1 * ::google::protobuf::internal::FromIntSize(_internal_my_map_size());
  for (const auto& entry : _internal_my_map()) {
    total_size += _pbi::MapEntryFuncs<::int32_t, std::string,
                                   _pbi::WireFormatLite::TYPE_INT32,
                                   _pbi::WireFormatLite::TYPE_STRING>::ByteSizeLong(entry.first, entry.second);
  }
  // optional string name = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_name());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}


void ComplexClass_PlainClass::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<ComplexClass_PlainClass*>(&to_msg);
  auto& from = static_cast<const ComplexClass_PlainClass&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:complexbenchmarking.ComplexClass.PlainClass)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.my_map_.MergeFrom(from._impl_.my_map_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _this->_internal_set_name(from._internal_name());
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void ComplexClass_PlainClass::CopyFrom(const ComplexClass_PlainClass& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:complexbenchmarking.ComplexClass.PlainClass)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool ComplexClass_PlainClass::IsInitialized() const {
  return true;
}

void ComplexClass_PlainClass::InternalSwap(ComplexClass_PlainClass* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.my_map_.InternalSwap(&other->_impl_.my_map_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.name_, &other->_impl_.name_, arena);
}

::google::protobuf::Metadata ComplexClass_PlainClass::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Complex_2eproto_getter, &descriptor_table_Complex_2eproto_once,
      file_level_metadata_Complex_2eproto[1]);
}
// ===================================================================

ComplexClass_InnerIntMap_MMapEntry_DoNotUse::ComplexClass_InnerIntMap_MMapEntry_DoNotUse() {}
ComplexClass_InnerIntMap_MMapEntry_DoNotUse::ComplexClass_InnerIntMap_MMapEntry_DoNotUse(::google::protobuf::Arena* arena)
    : SuperType(arena) {}
::google::protobuf::Metadata ComplexClass_InnerIntMap_MMapEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Complex_2eproto_getter, &descriptor_table_Complex_2eproto_once,
      file_level_metadata_Complex_2eproto[2]);
}
// ===================================================================

class ComplexClass_InnerIntMap::_Internal {
 public:
};

ComplexClass_InnerIntMap::ComplexClass_InnerIntMap(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:complexbenchmarking.ComplexClass.InnerIntMap)
}
inline PROTOBUF_NDEBUG_INLINE ComplexClass_InnerIntMap::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : m_map_{visibility, arena, from.m_map_},
        _cached_size_{0} {}

ComplexClass_InnerIntMap::ComplexClass_InnerIntMap(
    ::google::protobuf::Arena* arena,
    const ComplexClass_InnerIntMap& from)
    : ::google::protobuf::Message(arena) {
  ComplexClass_InnerIntMap* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);

  // @@protoc_insertion_point(copy_constructor:complexbenchmarking.ComplexClass.InnerIntMap)
}
inline PROTOBUF_NDEBUG_INLINE ComplexClass_InnerIntMap::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : m_map_{visibility, arena},
        _cached_size_{0} {}

inline void ComplexClass_InnerIntMap::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
}
ComplexClass_InnerIntMap::~ComplexClass_InnerIntMap() {
  // @@protoc_insertion_point(destructor:complexbenchmarking.ComplexClass.InnerIntMap)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void ComplexClass_InnerIntMap::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.~Impl_();
}

const ::google::protobuf::MessageLite::ClassData*
ComplexClass_InnerIntMap::GetClassData() const {
  PROTOBUF_CONSTINIT static const ::google::protobuf::MessageLite::ClassData
      _data_ = {
          ComplexClass_InnerIntMap::MergeImpl,
           nullptr,  // OnDemandRegisterArenaDtor
           &::google::protobuf::Message::kDescriptorMethods,
              PROTOBUF_FIELD_OFFSET(ComplexClass_InnerIntMap, _impl_._cached_size_),
      };
  return &_data_;
}
PROTOBUF_NOINLINE void ComplexClass_InnerIntMap::Clear() {
// @@protoc_insertion_point(message_clear_start:complexbenchmarking.ComplexClass.InnerIntMap)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.m_map_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* ComplexClass_InnerIntMap::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 1, 0, 2> ComplexClass_InnerIntMap::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_ComplexClass_InnerIntMap_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::complexbenchmarking::ComplexClass_InnerIntMap>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // map<int32, int32> m_map = 1;
    {PROTOBUF_FIELD_OFFSET(ComplexClass_InnerIntMap, _impl_.m_map_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kMap)},
  }}, {{
    {::_pbi::TcParser::GetMapAuxInfo<
        decltype(ComplexClass_InnerIntMap()._impl_.m_map_)>(
        0, 1, 0, 5,
        5)},
  }}, {{
  }},
};

::uint8_t* ComplexClass_InnerIntMap::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:complexbenchmarking.ComplexClass.InnerIntMap)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // map<int32, int32> m_map = 1;
  if (!_internal_m_map().empty()) {
    using MapType = ::google::protobuf::Map<::int32_t, ::int32_t>;
    using WireHelper = _pbi::MapEntryFuncs<::int32_t, ::int32_t,
                                   _pbi::WireFormatLite::TYPE_INT32,
                                   _pbi::WireFormatLite::TYPE_INT32>;
    const auto& field = _internal_m_map();

    if (stream->IsSerializationDeterministic() && field.size() > 1) {
      for (const auto& entry : ::google::protobuf::internal::MapSorterFlat<MapType>(field)) {
        target = WireHelper::InternalSerialize(
            1, entry.first, entry.second, target, stream);
      }
    } else {
      for (const auto& entry : field) {
        target = WireHelper::InternalSerialize(
            1, entry.first, entry.second, target, stream);
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:complexbenchmarking.ComplexClass.InnerIntMap)
  return target;
}

::size_t ComplexClass_InnerIntMap::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:complexbenchmarking.ComplexClass.InnerIntMap)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<int32, int32> m_map = 1;
  total_size += 1 * ::google::protobuf::internal::FromIntSize(_internal_m_map_size());
  for (const auto& entry : _internal_m_map()) {
    total_size += _pbi::MapEntryFuncs<::int32_t, ::int32_t,
                                   _pbi::WireFormatLite::TYPE_INT32,
                                   _pbi::WireFormatLite::TYPE_INT32>::ByteSizeLong(entry.first, entry.second);
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}


void ComplexClass_InnerIntMap::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<ComplexClass_InnerIntMap*>(&to_msg);
  auto& from = static_cast<const ComplexClass_InnerIntMap&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:complexbenchmarking.ComplexClass.InnerIntMap)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.m_map_.MergeFrom(from._impl_.m_map_);
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void ComplexClass_InnerIntMap::CopyFrom(const ComplexClass_InnerIntMap& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:complexbenchmarking.ComplexClass.InnerIntMap)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool ComplexClass_InnerIntMap::IsInitialized() const {
  return true;
}

void ComplexClass_InnerIntMap::InternalSwap(ComplexClass_InnerIntMap* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.m_map_.InternalSwap(&other->_impl_.m_map_);
}

::google::protobuf::Metadata ComplexClass_InnerIntMap::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Complex_2eproto_getter, &descriptor_table_Complex_2eproto_once,
      file_level_metadata_Complex_2eproto[3]);
}
// ===================================================================

ComplexClass_InnerPlainClassMap_MyMapEntry_DoNotUse::ComplexClass_InnerPlainClassMap_MyMapEntry_DoNotUse() {}
ComplexClass_InnerPlainClassMap_MyMapEntry_DoNotUse::ComplexClass_InnerPlainClassMap_MyMapEntry_DoNotUse(::google::protobuf::Arena* arena)
    : SuperType(arena) {}
::google::protobuf::Metadata ComplexClass_InnerPlainClassMap_MyMapEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Complex_2eproto_getter, &descriptor_table_Complex_2eproto_once,
      file_level_metadata_Complex_2eproto[4]);
}
// ===================================================================

class ComplexClass_InnerPlainClassMap::_Internal {
 public:
};

ComplexClass_InnerPlainClassMap::ComplexClass_InnerPlainClassMap(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:complexbenchmarking.ComplexClass.InnerPlainClassMap)
}
inline PROTOBUF_NDEBUG_INLINE ComplexClass_InnerPlainClassMap::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : my_map_{visibility, arena, from.my_map_},
        _cached_size_{0} {}

ComplexClass_InnerPlainClassMap::ComplexClass_InnerPlainClassMap(
    ::google::protobuf::Arena* arena,
    const ComplexClass_InnerPlainClassMap& from)
    : ::google::protobuf::Message(arena) {
  ComplexClass_InnerPlainClassMap* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);

  // @@protoc_insertion_point(copy_constructor:complexbenchmarking.ComplexClass.InnerPlainClassMap)
}
inline PROTOBUF_NDEBUG_INLINE ComplexClass_InnerPlainClassMap::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : my_map_{visibility, arena},
        _cached_size_{0} {}

inline void ComplexClass_InnerPlainClassMap::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
}
ComplexClass_InnerPlainClassMap::~ComplexClass_InnerPlainClassMap() {
  // @@protoc_insertion_point(destructor:complexbenchmarking.ComplexClass.InnerPlainClassMap)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void ComplexClass_InnerPlainClassMap::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.~Impl_();
}

const ::google::protobuf::MessageLite::ClassData*
ComplexClass_InnerPlainClassMap::GetClassData() const {
  PROTOBUF_CONSTINIT static const ::google::protobuf::MessageLite::ClassData
      _data_ = {
          ComplexClass_InnerPlainClassMap::MergeImpl,
           nullptr,  // OnDemandRegisterArenaDtor
           &::google::protobuf::Message::kDescriptorMethods,
              PROTOBUF_FIELD_OFFSET(ComplexClass_InnerPlainClassMap, _impl_._cached_size_),
      };
  return &_data_;
}
PROTOBUF_NOINLINE void ComplexClass_InnerPlainClassMap::Clear() {
// @@protoc_insertion_point(message_clear_start:complexbenchmarking.ComplexClass.InnerPlainClassMap)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.my_map_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* ComplexClass_InnerPlainClassMap::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 2, 0, 2> ComplexClass_InnerPlainClassMap::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    2,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_ComplexClass_InnerPlainClassMap_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::complexbenchmarking::ComplexClass_InnerPlainClassMap>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // map<int32, .complexbenchmarking.ComplexClass.PlainClass> my_map = 1;
    {PROTOBUF_FIELD_OFFSET(ComplexClass_InnerPlainClassMap, _impl_.my_map_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kMap)},
  }}, {{
    {::_pbi::TcParser::GetMapAuxInfo<
        decltype(ComplexClass_InnerPlainClassMap()._impl_.my_map_)>(
        0, 1, 0, 5,
        11)},
    {::_pbi::TcParser::CreateInArenaStorageCb<::complexbenchmarking::ComplexClass_PlainClass>},
  }}, {{
  }},
};

::uint8_t* ComplexClass_InnerPlainClassMap::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:complexbenchmarking.ComplexClass.InnerPlainClassMap)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // map<int32, .complexbenchmarking.ComplexClass.PlainClass> my_map = 1;
  if (!_internal_my_map().empty()) {
    using MapType = ::google::protobuf::Map<::int32_t, ::complexbenchmarking::ComplexClass_PlainClass>;
    using WireHelper = _pbi::MapEntryFuncs<::int32_t, ::complexbenchmarking::ComplexClass_PlainClass,
                                   _pbi::WireFormatLite::TYPE_INT32,
                                   _pbi::WireFormatLite::TYPE_MESSAGE>;
    const auto& field = _internal_my_map();

    if (stream->IsSerializationDeterministic() && field.size() > 1) {
      for (const auto& entry : ::google::protobuf::internal::MapSorterFlat<MapType>(field)) {
        target = WireHelper::InternalSerialize(
            1, entry.first, entry.second, target, stream);
      }
    } else {
      for (const auto& entry : field) {
        target = WireHelper::InternalSerialize(
            1, entry.first, entry.second, target, stream);
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:complexbenchmarking.ComplexClass.InnerPlainClassMap)
  return target;
}

::size_t ComplexClass_InnerPlainClassMap::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:complexbenchmarking.ComplexClass.InnerPlainClassMap)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<int32, .complexbenchmarking.ComplexClass.PlainClass> my_map = 1;
  total_size += 1 * ::google::protobuf::internal::FromIntSize(_internal_my_map_size());
  for (const auto& entry : _internal_my_map()) {
    total_size += _pbi::MapEntryFuncs<::int32_t, ::complexbenchmarking::ComplexClass_PlainClass,
                                   _pbi::WireFormatLite::TYPE_INT32,
                                   _pbi::WireFormatLite::TYPE_MESSAGE>::ByteSizeLong(entry.first, entry.second);
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}


void ComplexClass_InnerPlainClassMap::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<ComplexClass_InnerPlainClassMap*>(&to_msg);
  auto& from = static_cast<const ComplexClass_InnerPlainClassMap&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:complexbenchmarking.ComplexClass.InnerPlainClassMap)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.my_map_.MergeFrom(from._impl_.my_map_);
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void ComplexClass_InnerPlainClassMap::CopyFrom(const ComplexClass_InnerPlainClassMap& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:complexbenchmarking.ComplexClass.InnerPlainClassMap)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool ComplexClass_InnerPlainClassMap::IsInitialized() const {
  return true;
}

void ComplexClass_InnerPlainClassMap::InternalSwap(ComplexClass_InnerPlainClassMap* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.my_map_.InternalSwap(&other->_impl_.my_map_);
}

::google::protobuf::Metadata ComplexClass_InnerPlainClassMap::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Complex_2eproto_getter, &descriptor_table_Complex_2eproto_once,
      file_level_metadata_Complex_2eproto[5]);
}
// ===================================================================

class ComplexClass_InnerPlainClassMapArray::_Internal {
 public:
  using HasBits = decltype(std::declval<ComplexClass_InnerPlainClassMapArray>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(ComplexClass_InnerPlainClassMapArray, _impl_._has_bits_);
};

ComplexClass_InnerPlainClassMapArray::ComplexClass_InnerPlainClassMapArray(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:complexbenchmarking.ComplexClass.InnerPlainClassMapArray)
}
inline PROTOBUF_NDEBUG_INLINE ComplexClass_InnerPlainClassMapArray::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

ComplexClass_InnerPlainClassMapArray::ComplexClass_InnerPlainClassMapArray(
    ::google::protobuf::Arena* arena,
    const ComplexClass_InnerPlainClassMapArray& from)
    : ::google::protobuf::Message(arena) {
  ComplexClass_InnerPlainClassMapArray* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.my_maps_ = (cached_has_bits & 0x00000001u) ? ::google::protobuf::Message::CopyConstruct<::complexbenchmarking::ComplexClass_InnerPlainClassMap>(
                              arena, *from._impl_.my_maps_)
                        : nullptr;

  // @@protoc_insertion_point(copy_constructor:complexbenchmarking.ComplexClass.InnerPlainClassMapArray)
}
inline PROTOBUF_NDEBUG_INLINE ComplexClass_InnerPlainClassMapArray::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void ComplexClass_InnerPlainClassMapArray::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.my_maps_ = {};
}
ComplexClass_InnerPlainClassMapArray::~ComplexClass_InnerPlainClassMapArray() {
  // @@protoc_insertion_point(destructor:complexbenchmarking.ComplexClass.InnerPlainClassMapArray)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void ComplexClass_InnerPlainClassMapArray::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  delete _impl_.my_maps_;
  _impl_.~Impl_();
}

const ::google::protobuf::MessageLite::ClassData*
ComplexClass_InnerPlainClassMapArray::GetClassData() const {
  PROTOBUF_CONSTINIT static const ::google::protobuf::MessageLite::ClassData
      _data_ = {
          ComplexClass_InnerPlainClassMapArray::MergeImpl,
           nullptr,  // OnDemandRegisterArenaDtor
           &::google::protobuf::Message::kDescriptorMethods,
              PROTOBUF_FIELD_OFFSET(ComplexClass_InnerPlainClassMapArray, _impl_._cached_size_),
      };
  return &_data_;
}
PROTOBUF_NOINLINE void ComplexClass_InnerPlainClassMapArray::Clear() {
// @@protoc_insertion_point(message_clear_start:complexbenchmarking.ComplexClass.InnerPlainClassMapArray)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.my_maps_ != nullptr);
    _impl_.my_maps_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* ComplexClass_InnerPlainClassMapArray::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 1, 0, 2> ComplexClass_InnerPlainClassMapArray::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(ComplexClass_InnerPlainClassMapArray, _impl_._has_bits_),
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_ComplexClass_InnerPlainClassMapArray_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::complexbenchmarking::ComplexClass_InnerPlainClassMapArray>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // optional .complexbenchmarking.ComplexClass.InnerPlainClassMap my_maps = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(ComplexClass_InnerPlainClassMapArray, _impl_.my_maps_)}},
  }}, {{
    65535, 65535
  }}, {{
    // optional .complexbenchmarking.ComplexClass.InnerPlainClassMap my_maps = 1;
    {PROTOBUF_FIELD_OFFSET(ComplexClass_InnerPlainClassMapArray, _impl_.my_maps_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::complexbenchmarking::ComplexClass_InnerPlainClassMap>()},
  }}, {{
  }},
};

::uint8_t* ComplexClass_InnerPlainClassMapArray::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:complexbenchmarking.ComplexClass.InnerPlainClassMapArray)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .complexbenchmarking.ComplexClass.InnerPlainClassMap my_maps = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        1, *_impl_.my_maps_, _impl_.my_maps_->GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:complexbenchmarking.ComplexClass.InnerPlainClassMapArray)
  return target;
}

::size_t ComplexClass_InnerPlainClassMapArray::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:complexbenchmarking.ComplexClass.InnerPlainClassMapArray)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .complexbenchmarking.ComplexClass.InnerPlainClassMap my_maps = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size +=
        1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.my_maps_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}


void ComplexClass_InnerPlainClassMapArray::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<ComplexClass_InnerPlainClassMapArray*>(&to_msg);
  auto& from = static_cast<const ComplexClass_InnerPlainClassMapArray&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:complexbenchmarking.ComplexClass.InnerPlainClassMapArray)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(from._impl_.my_maps_ != nullptr);
    if (_this->_impl_.my_maps_ == nullptr) {
      _this->_impl_.my_maps_ =
          ::google::protobuf::Message::CopyConstruct<::complexbenchmarking::ComplexClass_InnerPlainClassMap>(arena, *from._impl_.my_maps_);
    } else {
      _this->_impl_.my_maps_->MergeFrom(*from._impl_.my_maps_);
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void ComplexClass_InnerPlainClassMapArray::CopyFrom(const ComplexClass_InnerPlainClassMapArray& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:complexbenchmarking.ComplexClass.InnerPlainClassMapArray)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool ComplexClass_InnerPlainClassMapArray::IsInitialized() const {
  return true;
}

void ComplexClass_InnerPlainClassMapArray::InternalSwap(ComplexClass_InnerPlainClassMapArray* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.my_maps_, other->_impl_.my_maps_);
}

::google::protobuf::Metadata ComplexClass_InnerPlainClassMapArray::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Complex_2eproto_getter, &descriptor_table_Complex_2eproto_once,
      file_level_metadata_Complex_2eproto[6]);
}
// ===================================================================

ComplexClass_IntMapEntry_DoNotUse::ComplexClass_IntMapEntry_DoNotUse() {}
ComplexClass_IntMapEntry_DoNotUse::ComplexClass_IntMapEntry_DoNotUse(::google::protobuf::Arena* arena)
    : SuperType(arena) {}
::google::protobuf::Metadata ComplexClass_IntMapEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Complex_2eproto_getter, &descriptor_table_Complex_2eproto_once,
      file_level_metadata_Complex_2eproto[7]);
}
// ===================================================================

class ComplexClass::_Internal {
 public:
  using HasBits = decltype(std::declval<ComplexClass>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(ComplexClass, _impl_._has_bits_);
};

ComplexClass::ComplexClass(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:complexbenchmarking.ComplexClass)
}
inline PROTOBUF_NDEBUG_INLINE ComplexClass::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        int_map_{visibility, arena, from.int_map_},
        plain_class_map_{visibility, arena, from.plain_class_map_},
        name_(arena, from.name_) {}

ComplexClass::ComplexClass(
    ::google::protobuf::Arena* arena,
    const ComplexClass& from)
    : ::google::protobuf::Message(arena) {
  ComplexClass* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, id_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, id_),
           offsetof(Impl_, count_) -
               offsetof(Impl_, id_) +
               sizeof(Impl_::count_));

  // @@protoc_insertion_point(copy_constructor:complexbenchmarking.ComplexClass)
}
inline PROTOBUF_NDEBUG_INLINE ComplexClass::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        int_map_{visibility, arena},
        plain_class_map_{visibility, arena},
        name_(arena) {}

inline void ComplexClass::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, id_),
           0,
           offsetof(Impl_, count_) -
               offsetof(Impl_, id_) +
               sizeof(Impl_::count_));
}
ComplexClass::~ComplexClass() {
  // @@protoc_insertion_point(destructor:complexbenchmarking.ComplexClass)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void ComplexClass::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.name_.Destroy();
  _impl_.~Impl_();
}

const ::google::protobuf::MessageLite::ClassData*
ComplexClass::GetClassData() const {
  PROTOBUF_CONSTINIT static const ::google::protobuf::MessageLite::ClassData
      _data_ = {
          ComplexClass::MergeImpl,
           nullptr,  // OnDemandRegisterArenaDtor
           &::google::protobuf::Message::kDescriptorMethods,
              PROTOBUF_FIELD_OFFSET(ComplexClass, _impl_._cached_size_),
      };
  return &_data_;
}
PROTOBUF_NOINLINE void ComplexClass::Clear() {
// @@protoc_insertion_point(message_clear_start:complexbenchmarking.ComplexClass)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.int_map_.Clear();
  _impl_.plain_class_map_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.name_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&_impl_.id_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.count_) -
        reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.count_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* ComplexClass::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 5, 3, 45, 2> ComplexClass::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(ComplexClass, _impl_._has_bits_),
    0, // no _extensions_
    5, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967264,  // skipmap
    offsetof(decltype(_table_), field_entries),
    5,  // num_field_entries
    3,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_ComplexClass_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::complexbenchmarking::ComplexClass>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // optional int32 id = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(ComplexClass, _impl_.id_), 1>(),
     {8, 1, 0, PROTOBUF_FIELD_OFFSET(ComplexClass, _impl_.id_)}},
    // optional int32 count = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(ComplexClass, _impl_.count_), 2>(),
     {16, 2, 0, PROTOBUF_FIELD_OFFSET(ComplexClass, _impl_.count_)}},
    // optional string name = 3;
    {::_pbi::TcParser::FastSS1,
     {26, 0, 0, PROTOBUF_FIELD_OFFSET(ComplexClass, _impl_.name_)}},
    {::_pbi::TcParser::MiniParse, {}},
    // repeated .complexbenchmarking.ComplexClass.InnerPlainClassMapArray plain_class_map = 5;
    {::_pbi::TcParser::FastMtR1,
     {42, 63, 2, PROTOBUF_FIELD_OFFSET(ComplexClass, _impl_.plain_class_map_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // optional int32 id = 1;
    {PROTOBUF_FIELD_OFFSET(ComplexClass, _impl_.id_), _Internal::kHasBitsOffset + 1, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt32)},
    // optional int32 count = 2;
    {PROTOBUF_FIELD_OFFSET(ComplexClass, _impl_.count_), _Internal::kHasBitsOffset + 2, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt32)},
    // optional string name = 3;
    {PROTOBUF_FIELD_OFFSET(ComplexClass, _impl_.name_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kRawString | ::_fl::kRepAString)},
    // map<int32, .complexbenchmarking.ComplexClass.InnerIntMap> int_map = 4;
    {PROTOBUF_FIELD_OFFSET(ComplexClass, _impl_.int_map_), -1, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kMap)},
    // repeated .complexbenchmarking.ComplexClass.InnerPlainClassMapArray plain_class_map = 5;
    {PROTOBUF_FIELD_OFFSET(ComplexClass, _impl_.plain_class_map_), -1, 2,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetMapAuxInfo<
        decltype(ComplexClass()._impl_.int_map_)>(
        0, 1, 0, 5,
        11)},
    {::_pbi::TcParser::CreateInArenaStorageCb<::complexbenchmarking::ComplexClass_InnerIntMap>},
    {::_pbi::TcParser::GetTable<::complexbenchmarking::ComplexClass_InnerPlainClassMapArray>()},
  }}, {{
    "\40\0\0\4\0\0\0\0"
    "complexbenchmarking.ComplexClass"
    "name"
  }},
};

::uint8_t* ComplexClass::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:complexbenchmarking.ComplexClass)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<1>(
            stream, this->_internal_id(), target);
  }

  // optional int32 count = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<2>(
            stream, this->_internal_count(), target);
  }

  // optional string name = 3;
  if (cached_has_bits & 0x00000001u) {
    const std::string& _s = this->_internal_name();
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(_s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormat::SERIALIZE,
                                "complexbenchmarking.ComplexClass.name");
    target = stream->WriteStringMaybeAliased(3, _s, target);
  }

  // map<int32, .complexbenchmarking.ComplexClass.InnerIntMap> int_map = 4;
  if (!_internal_int_map().empty()) {
    using MapType = ::google::protobuf::Map<::int32_t, ::complexbenchmarking::ComplexClass_InnerIntMap>;
    using WireHelper = _pbi::MapEntryFuncs<::int32_t, ::complexbenchmarking::ComplexClass_InnerIntMap,
                                   _pbi::WireFormatLite::TYPE_INT32,
                                   _pbi::WireFormatLite::TYPE_MESSAGE>;
    const auto& field = _internal_int_map();

    if (stream->IsSerializationDeterministic() && field.size() > 1) {
      for (const auto& entry : ::google::protobuf::internal::MapSorterFlat<MapType>(field)) {
        target = WireHelper::InternalSerialize(
            4, entry.first, entry.second, target, stream);
      }
    } else {
      for (const auto& entry : field) {
        target = WireHelper::InternalSerialize(
            4, entry.first, entry.second, target, stream);
      }
    }
  }

  // repeated .complexbenchmarking.ComplexClass.InnerPlainClassMapArray plain_class_map = 5;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_plain_class_map_size()); i < n; i++) {
    const auto& repfield = this->_internal_plain_class_map().Get(i);
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(5, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:complexbenchmarking.ComplexClass)
  return target;
}

::size_t ComplexClass::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:complexbenchmarking.ComplexClass)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<int32, .complexbenchmarking.ComplexClass.InnerIntMap> int_map = 4;
  total_size += 1 * ::google::protobuf::internal::FromIntSize(_internal_int_map_size());
  for (const auto& entry : _internal_int_map()) {
    total_size += _pbi::MapEntryFuncs<::int32_t, ::complexbenchmarking::ComplexClass_InnerIntMap,
                                   _pbi::WireFormatLite::TYPE_INT32,
                                   _pbi::WireFormatLite::TYPE_MESSAGE>::ByteSizeLong(entry.first, entry.second);
  }
  // repeated .complexbenchmarking.ComplexClass.InnerPlainClassMapArray plain_class_map = 5;
  total_size += 1UL * this->_internal_plain_class_map_size();
  for (const auto& msg : this->_internal_plain_class_map()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string name = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                      this->_internal_name());
    }

    // optional int32 id = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this->_internal_id());
    }

    // optional int32 count = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this->_internal_count());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}


void ComplexClass::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<ComplexClass*>(&to_msg);
  auto& from = static_cast<const ComplexClass&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:complexbenchmarking.ComplexClass)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.int_map_.MergeFrom(from._impl_.int_map_);
  _this->_internal_mutable_plain_class_map()->MergeFrom(
      from._internal_plain_class_map());
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.id_ = from._impl_.id_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.count_ = from._impl_.count_;
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void ComplexClass::CopyFrom(const ComplexClass& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:complexbenchmarking.ComplexClass)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool ComplexClass::IsInitialized() const {
  return true;
}

void ComplexClass::InternalSwap(ComplexClass* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.int_map_.InternalSwap(&other->_impl_.int_map_);
  _impl_.plain_class_map_.InternalSwap(&other->_impl_.plain_class_map_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.name_, &other->_impl_.name_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ComplexClass, _impl_.count_)
      + sizeof(ComplexClass::_impl_.count_)
      - PROTOBUF_FIELD_OFFSET(ComplexClass, _impl_.id_)>(
          reinterpret_cast<char*>(&_impl_.id_),
          reinterpret_cast<char*>(&other->_impl_.id_));
}

::google::protobuf::Metadata ComplexClass::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Complex_2eproto_getter, &descriptor_table_Complex_2eproto_once,
      file_level_metadata_Complex_2eproto[8]);
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace complexbenchmarking
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"
